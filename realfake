import pandas as pd
import re
import os
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, classification_report, ConfusionMatrixDisplay

# 1. 데이터 로딩 및 결합
df_fake = pd.read_csv("Fake.csv")
df_real = pd.read_csv("True.csv")
df_fake["label"] = 0
df_real["label"] = 1
df = pd.concat([df_fake, df_real])

# 2. 텍스트 정제
def clean_text(text):
    text = text.lower()
    text = re.sub(r'[^a-zA-Z]', ' ', text)
    return text

df["clean_text"] = df["text"].apply(clean_text)

# 3. 벡터화 및 학습
X = df["clean_text"]
y = df["label"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

vectorizer = TfidfVectorizer(stop_words='english', max_df=0.7)
X_train_tfidf = vectorizer.fit_transform(X_train)
X_test_tfidf = vectorizer.transform(X_test)

model = MultinomialNB()
model.fit(X_train_tfidf, y_train)
y_pred = model.predict(X_test_tfidf)

# 4. 평가
print("\n✅ 모델 평가 결과:")
print(f"정확도: {accuracy_score(y_test, y_pred):.4f}")
print("\n📊 분류 리포트:")
print(classification_report(y_test, y_pred, target_names=["FAKE", "REAL"]))

# 5. 혼동 행렬 저장
save_path = "/Users/moonseoyeong/Documents/fake_news_project/confusion_matrix.png"
ConfusionMatrixDisplay.from_estimator(model, X_test_tfidf, y_test, display_labels=["FAKE", "REAL"], cmap="Blues")
plt.title("Confusion Matrix")
if os.path.exists(save_path):
    os.remove(save_path)
plt.savefig(save_path)
plt.close()
print(f"📸 저장 완료! 이미지 위치: {save_path}")

# 6. 콘솔 입력 + 누적 파이차트 저장
counter = 1
while True:
    user_input = input("\n📰 판별할 뉴스 기사 문장을 입력하세요 (종료하려면 'exit'): ")
    if user_input.lower() == "exit":
        break

    cleaned = clean_text(user_input)
    vec = vectorizer.transform([cleaned])
    result = model.predict(vec)
    prob = model.predict_proba(vec)[0]

    print("→ 예측 결과:", "🟢 진짜 뉴스입니다." if result[0] == 1 else "🔴 가짜 뉴스입니다.")
    print(f"→ 예측 확률: FAKE={prob[0]:.2f}, REAL={prob[1]:.2f}")

    # 파이 차트 누적 저장
    labels = ['FAKE', 'REAL']
    colors = ['red', 'green']
    plt.figure(figsize=(5,5))
    plt.pie(prob, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)
    plt.title("Prediction Result")
    filename = f"predict_{counter}.png"
    plt.savefig(filename)
    plt.close()
    print(f"📸 결과 이미지 저장 완료 → {filename}")
    counter += 1

